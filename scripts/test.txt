<context> # Overview 本產品是一個**非同步聊天流程系統**，設計用於支援多方對話與數據整合。它解決了傳統同步聊天機制無法有效追蹤、存取與後端資料整合的問題，特別適合需處理大量對話、工作流程自動化、或與資料倉儲（如 BigQuery）整合的應用場景。適用對象為企業內部自動化流程、客服機器人開發團隊、以及需串接大型資料庫的開發者。 其價值在於提升對話流程的彈性與自動化程度，簡化資料流通與後續分析，降低人工維運成本。
Core Features
非同步聊天流程管理

提供一套可以處理多個同時進行聊天任務的流程控制框架。

重要性：允許用戶（或系統）自由切換、查詢多個對話上下文，不被同步鎖定，提升系統可擴展性。

運作原理：透過任務管理、訊息狀態追蹤、自定義事件觸發，實現完整的對話流程追蹤與切換。

資料庫結構（BigQuery Schema）設計與串接

提供嚴謹的資料欄位結構定義，支援與 Google BigQuery 整合。

重要性：保證資料一致性與可擴充性，便於進行後續大數據分析、報表生成。

運作原理：以 Python 物件定義 schema，結合自動化 schema 驗證與轉換。

API 介接與模組化擴充

可彈性接入不同訊息來源（如 HTTP、Webhook、第三方平台 API），並支援事件驅動式擴充。

重要性：簡化對外整合流程，方便根據業務需求擴充新功能或接入新平台。

運作原理：模組化設計，核心流程與外部擴充介面分離。

User Experience
用戶角色：

系統管理員／開發人員：設定、維護與擴充聊天流程，串接資料庫。

一般業務使用者：透過前端界面發起／查詢對話任務，或取得自動化訊息通知。

關鍵用戶流程：

管理員設計或設定新的聊天流程 → 接入 BigQuery 欄位 → 上線服務 → 使用者發起聊天 → 後端自動處理 → 資料落地。

UI/UX 考量：

前端需簡潔顯示聊天進度及狀態。

須有管理介面供快速查詢／設定現有流程與資料欄位對應。

支援任務／對話搜尋與歷程追蹤。

</context>
<PRD> # Technical Architecture - **系統元件**： - Chat Flow Controller（非同步任務管理主體） - Message Handler（訊息處理與狀態追蹤） - BigQuery Integration Layer（資料庫串接層） - API Gateway／Webhook Receiver（對外 API 整合入口） - 前端管理介面（可選，供流程設定及查詢）
資料模型：

ChatTask：記錄每個對話任務的唯一識別碼、狀態、開始／結束時間等。

Message：記錄每筆訊息內容、發送者、時間、所屬任務等欄位。

BigQuery Schema 以 bq_schema.py 內 class 為依據，可客製欄位。

API 介接與擴充：

RESTful API 設計，支援 GET/POST 查詢與發送訊息、查詢任務進度等。

提供 Webhook 支援（可接收外部事件、觸發聊天流程）。

基礎設施需求：

支援 Python 3.8+ 執行環境

Google Cloud BigQuery 存取權限

伺服器運行 API Gateway 與任務排程服務（可用 Docker 部署）

Development Roadmap
MVP 階段

基本非同步聊天流程邏輯（含多任務管理與訊息狀態追蹤）

基本 BigQuery Schema 定義與資料落地功能

RESTful API 查詢與發送訊息

rudimentary 前端管理頁（顯示聊天紀錄與任務查詢）

進階擴充

支援多來源訊息整合（如 LINE、Slack、Email）

視覺化流程編輯器（管理員可直接設計聊天流程）

權限與審計紀錄

自動錯誤回報與異常重試機制

任務關聯分析與報表匯出功能

Logical Dependency Chain
第一階段需完成核心聊天流程管理與 BigQuery 資料結構設計，才能進行 API 與前端對接。

優先完成後端聊天流程引擎，使最小可用產品可接受、處理、儲存對話，盡早展現資料流通及查詢能力。

之後逐步補強前端查詢、擴充多元整合點（API、Webhook、平台串接）。

Risks and Mitigations
技術風險：BigQuery 串接失敗、資料欄位同步困難，需先做 schema 驗證自動化，並保持欄位設計彈性。

MVP 定義模糊：應聚焦於單一訊息流程與最小資料模型，減少開發面向。

資源限制：若人力不足，可先以 CLI/後端 API 為主，後補前端界面。

Appendix
研究參考：Google BigQuery 官方文件、各大聊天平台 API 文件

技術規格：見 bq_schema.py、async_chat_flow.py 內 class 定義與資料流

建議開發架構圖：可依據本文件進行細化

</PRD>
